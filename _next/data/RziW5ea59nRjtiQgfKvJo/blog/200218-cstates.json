{"pageProps":{"post":{"frontmatter":{"title":"코드스테이츠 Pre course를 통해 프로그래밍을 배우면서 느낀 것","date":"2020-02-18 08:00","tags":["코드스테이츠"],"category":"blog","description":"코드스테이츠 Pre course를 통해 프로그래밍을 배우면서 느낀 것"},"body":"\n국비지원 교육을 받기 전 부트캠프로 유명한 코드스테이츠의 프리 코스를 수강하며 웹 개발의 기초적인 것들을 배웠다. \n준비된 강의를 보며 혼자 실습하는 방식으로 이루어졌다. 그동안 느낀 것을 짧게 적어보겠다. \n\n-------------------------\n# 잘한 점\n1. 아침 공부 시작할 때 콘솔에서 아무거나 쳐서 노는 한시간\n매일 본격적인 공부를 시작하기에 앞서 크롬 Developer's console에서 한 시간을 보냈다. 그 전날에 배웠던 걸 떠올리거나 내멋대로 변수,함수,배열을 만들어 복습했다. 충분히 배웠다/알고 있다고 생각되더라도 그렇지 않은 경우가 많았다. 본격적인 공부를 시작하기 전에 전날 배운 것을 복습하니 내가 아는 것과 모르는 것을 구분할 수 있어 더 효과적,효율적으로 공부할 수 있었다.\n\n2. 질문이 생기면 어느 부분에서 내가 이해가 안 되는 지 파악한 후 자세한 질문을 하고, 그 궁금증에 대한 나의 의견을 포함해 질문한 것.\n\n# 시행착오 / Immersive 코스를 수강하며 보완할 점\n1. 질문하기를 주저함. \n모든 프로그래밍 관련 질문은 구글링하면 답이 나온다는 생각때문이었다. 맞는 말이다. 그렇더라도 구글링을 해도 이해가 안되거나/그에 연관된 또다른 궁금증이 생기면 헬프데스크에 물어봤었어야 했는데 그러지 않았다. '더 공부를 하면 답을 알게 되겠지?'하고 질문을 옆으로 미뤄둔 채 시간을 보냈다.\n\n2. 블로그 포스팅을 github pages / velog 중 어디에 할지 방황함\n\n\n# 헷갈렸던 것, 보완이 필요한 것\n- array.filter(functionname)  \narray로 필터링을 할 땐 그 뒤 괄호 안에 이미 지정되어있는 함수의 이름이 들어간다. (함수를 새로 바로 선언해줘도 될 듯.)\n- array methods ‘every’ and ‘some’   \n그 요소들을 확인한 뒤 boolean값을 프린트한다.\n- Array.isArray(확인할 array이름) (a 대문자 두개임)  \n여기서 array.isArray 이런 식으로 대문자를 맞춰쓰지 않아 틀리는 경우가 잦았다. 첫 Array로 배열의 프로토타입 함수를 쓸거야~ 라고 미리 말해줘야한다. \n- array이면~ 빈 배열이면~ 같은 조건이 나올때 undefined 쓰지 말고 Array.isarray 쓰기   \n","slug":"200218-cstates"},"mdxSource":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      hr: \"hr\",\n      h1: \"h1\",\n      ol: \"ol\",\n      li: \"li\",\n      ul: \"ul\",\n      br: \"br\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsx(_components.p, {\n        children: \"국비지원 교육을 받기 전 부트캠프로 유명한 코드스테이츠의 프리 코스를 수강하며 웹 개발의 기초적인 것들을 배웠다.\\n준비된 강의를 보며 혼자 실습하는 방식으로 이루어졌다. 그동안 느낀 것을 짧게 적어보겠다.\"\n      }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h1, {\n        id: \"잘한-점\",\n        children: \"잘한 점\"\n      }), \"\\n\", _jsxs(_components.ol, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [\"\\n\", _jsx(_components.p, {\n            children: \"아침 공부 시작할 때 콘솔에서 아무거나 쳐서 노는 한시간\\n매일 본격적인 공부를 시작하기에 앞서 크롬 Developer's console에서 한 시간을 보냈다. 그 전날에 배웠던 걸 떠올리거나 내멋대로 변수,함수,배열을 만들어 복습했다. 충분히 배웠다/알고 있다고 생각되더라도 그렇지 않은 경우가 많았다. 본격적인 공부를 시작하기 전에 전날 배운 것을 복습하니 내가 아는 것과 모르는 것을 구분할 수 있어 더 효과적,효율적으로 공부할 수 있었다.\"\n          }), \"\\n\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"\\n\", _jsx(_components.p, {\n            children: \"질문이 생기면 어느 부분에서 내가 이해가 안 되는 지 파악한 후 자세한 질문을 하고, 그 궁금증에 대한 나의 의견을 포함해 질문한 것.\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.h1, {\n        id: \"시행착오--immersive-코스를-수강하며-보완할-점\",\n        children: \"시행착오 / Immersive 코스를 수강하며 보완할 점\"\n      }), \"\\n\", _jsxs(_components.ol, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [\"\\n\", _jsx(_components.p, {\n            children: \"질문하기를 주저함.\\n모든 프로그래밍 관련 질문은 구글링하면 답이 나온다는 생각때문이었다. 맞는 말이다. 그렇더라도 구글링을 해도 이해가 안되거나/그에 연관된 또다른 궁금증이 생기면 헬프데스크에 물어봤었어야 했는데 그러지 않았다. '더 공부를 하면 답을 알게 되겠지?'하고 질문을 옆으로 미뤄둔 채 시간을 보냈다.\"\n          }), \"\\n\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"\\n\", _jsx(_components.p, {\n            children: \"블로그 포스팅을 github pages / velog 중 어디에 할지 방황함\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.h1, {\n        id: \"헷갈렸던-것-보완이-필요한-것\",\n        children: \"헷갈렸던 것, 보완이 필요한 것\"\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [\"array.filter(functionname)\", _jsx(_components.br, {}), \"\\n\", \"array로 필터링을 할 땐 그 뒤 괄호 안에 이미 지정되어있는 함수의 이름이 들어간다. (함수를 새로 바로 선언해줘도 될 듯.)\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"array methods ‘every’ and ‘some’\", _jsx(_components.br, {}), \"\\n\", \"그 요소들을 확인한 뒤 boolean값을 프린트한다.\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"Array.isArray(확인할 array이름) (a 대문자 두개임)\", _jsx(_components.br, {}), \"\\n\", \"여기서 array.isArray 이런 식으로 대문자를 맞춰쓰지 않아 틀리는 경우가 잦았다. 첫 Array로 배열의 프로토타입 함수를 쓸거야~ 라고 미리 말해줘야한다.\"]\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"array이면~ 빈 배열이면~ 같은 조건이 나올때 undefined 쓰지 말고 Array.isarray 쓰기\"\n        }), \"\\n\"]\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"headings":[]},"__N_SSG":true}
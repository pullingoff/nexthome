{"pageProps":{"post":{"frontmatter":{"title":"[React] 리액트로 깃허브 페이지 만드는 방법, 순서 되돌아보기","date":"2022-01-19 11:00","tags":["리액트","깃허브페이지"],"category":"blog","description":"리액트로 깃허브 페이지를 만들어보았다!"},"body":"\n## 리액트로 깃허브 페이지를 만들게 된 계기\n예전에 jekyll theme을 사용해서 깃허브 페이지를 만들었었는데 \n이제 어느정도 html, css, js에 익숙해졌으니 내가 직접 만들어보자 해서\n리액트로 웹 페이지 겸 포트폴리오를 만들게 되었다.\n이용하기 편한 깃허브 페이지로!\n\n리액트로 깃허브페이지 만드는 방법은 자세히 다른 분들이 적어주셨으니 내가 참고한 링크와 가장 어려웠던 문제만 리스트업하겠다.\n\n\n## 내가 리액트로 깃허브 페이지 만든 순서\n1. 웹 페이지 레이아웃 구성 및 디자인 \n- 레이아웃은 무조건 깔끔하게 하기로 했다. 일단은 정적 페이지로 하기로 결정했다. 성격상 개발하면서 추가하고 싶은게 계속계속 생기기 때문에 ㅋㅋㅋ 일단은 간단하게 기초공사하기로 굳게 다짐하고 시작했다.  \n- 웹 페이지는 그냥 하나의 웹 사이트일 수도 있지만 나 자신을 브랜딩, 마케팅할 수 있는 공간. theme color에 노랑, 네이비를 섞고 싶었으나 디자인, CSS하다가 다른 것 못 할까봐 일단 올 화이트로 결정. 포인트 요소는 나중에 추가하면 되니깐!!\n2. 디렉토리 만들고 yarn, react 에 필요한 것들 환경설정, create-react-app \n3. HTML, CSS 레이아웃 구성\n4. 각 카테고리(blog, project, resume 등)에 리액트 라우터 연결\n5. 각 페이지에서 쓰이는 컴포넌트 제작 \n6. 빌드, 깃허브에 푸시\n7. 404.html, index.html 수정 (리액트로 깃허브 페이지 만든 경우 완전 중요!!)\n- 리액트는 SPA인데 깃허브 페이지는 SPA를 지원하지 않는다. 그래서 404.html과 index.html에 약간의 트릭을 줘야한다. package.json에 홈페이지 필드를 추가해두고 라우터에 basename을 넣으면 그 링크를 기준으로 이동하게 된다. 자세한 건 https://chinsun9.github.io/2021/07/30/serve-react-app-simply/ 를 참고했다.\n8. 깃허브 repo 내 page 설정\n9. 나는 내 웹페이지의 도메인인 hailey99.github.io 를 mango.dev 로 바꿨다. 저절로 DNS에 등록되는데 1일 정도가 소요된다.\n\n\n\n+ 완전 간단히 빌드용 파일만 올릴 땐 이 블로그를 참고해도 좋다.\n https://codingapple.com/unit/react-build-deploy-github-pages/\n","slug":"220119-rcthpg"},"mdxSource":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      h2: \"h2\",\n      p: \"p\",\n      ol: \"ol\",\n      li: \"li\",\n      ul: \"ul\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsx(_components.h2, {\n        id: \"리액트로-깃허브-페이지를-만들게-된-계기\",\n        children: \"리액트로 깃허브 페이지를 만들게 된 계기\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"예전에 jekyll theme을 사용해서 깃허브 페이지를 만들었었는데\\n이제 어느정도 html, css, js에 익숙해졌으니 내가 직접 만들어보자 해서\\n리액트로 웹 페이지 겸 포트폴리오를 만들게 되었다.\\n이용하기 편한 깃허브 페이지로!\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"리액트로 깃허브페이지 만드는 방법은 자세히 다른 분들이 적어주셨으니 내가 참고한 링크와 가장 어려웠던 문제만 리스트업하겠다.\"\n      }), \"\\n\", _jsx(_components.h2, {\n        id: \"내가-리액트로-깃허브-페이지-만든-순서\",\n        children: \"내가 리액트로 깃허브 페이지 만든 순서\"\n      }), \"\\n\", _jsxs(_components.ol, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"웹 페이지 레이아웃 구성 및 디자인\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"레이아웃은 무조건 깔끔하게 하기로 했다. 일단은 정적 페이지로 하기로 결정했다. 성격상 개발하면서 추가하고 싶은게 계속계속 생기기 때문에 ㅋㅋㅋ 일단은 간단하게 기초공사하기로 굳게 다짐하고 시작했다.\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"웹 페이지는 그냥 하나의 웹 사이트일 수도 있지만 나 자신을 브랜딩, 마케팅할 수 있는 공간. theme color에 노랑, 네이비를 섞고 싶었으나 디자인, CSS하다가 다른 것 못 할까봐 일단 올 화이트로 결정. 포인트 요소는 나중에 추가하면 되니깐!!\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.ol, {\n        start: \"2\",\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"디렉토리 만들고 yarn, react 에 필요한 것들 환경설정, create-react-app\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"HTML, CSS 레이아웃 구성\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"각 카테고리(blog, project, resume 등)에 리액트 라우터 연결\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"각 페이지에서 쓰이는 컴포넌트 제작\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"빌드, 깃허브에 푸시\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"404.html, index.html 수정 (리액트로 깃허브 페이지 만든 경우 완전 중요!!)\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"리액트는 SPA인데 깃허브 페이지는 SPA를 지원하지 않는다. 그래서 404.html과 index.html에 약간의 트릭을 줘야한다. package.json에 홈페이지 필드를 추가해두고 라우터에 basename을 넣으면 그 링크를 기준으로 이동하게 된다. 자세한 건 https://chinsun9.github.io/2021/07/30/serve-react-app-simply/ 를 참고했다.\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.ol, {\n        start: \"8\",\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"깃허브 repo 내 page 설정\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"나는 내 웹페이지의 도메인인 hailey99.github.io 를 mango.dev 로 바꿨다. 저절로 DNS에 등록되는데 1일 정도가 소요된다.\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"완전 간단히 빌드용 파일만 올릴 땐 이 블로그를 참고해도 좋다.\\nhttps://codingapple.com/unit/react-build-deploy-github-pages/\"\n        }), \"\\n\"]\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"headings":[{"text":"리액트로 깃허브 페이지를 만들게 된 계기","link":"#리액트로_깃허브_페이지를_만들게_된_계기"},{"text":"내가 리액트로 깃허브 페이지 만든 순서","link":"#내가_리액트로_깃허브_페이지_만든_순서"}]},"__N_SSG":true}